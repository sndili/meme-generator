{"ast":null,"code":"import _objectSpread from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/sylvia/Development/code/Phase2/meme-generator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/sylvia/Development/code/Phase2/meme-generator/src/components/MemeGenerator.js\";\nimport React, { Component } from \"react\";\n\nvar MemeGenerator = /*#__PURE__*/function (_Component) {\n  _inherits(MemeGenerator, _Component);\n\n  function MemeGenerator() {\n    var _this;\n\n    _classCallCheck(this, MemeGenerator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemeGenerator).call(this));\n    _this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n      topTextColor: 'white',\n      bottomTextColor: 'white'\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MemeGenerator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"https://api.imgflip.com/get_memes\").then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        var memes = response.data.memes;\n\n        _this2.setState({\n          allMemeImgs: memes\n        });\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      this.setState(_defineProperty({}, name, value));\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      var randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n      var randMemImge = this.state.allMemeImgs[randNum].url;\n      this.setState({\n        randomImg: randMemImge\n      });\n    }\n  }, {\n    key: \"imghandle\",\n    value: function imghandle(event) {\n      var url = \"\";\n\n      if (event.target.files.length !== 0) {\n        url = URL.createObjectURL(event.target.files[0]);\n      } // url = URL.createObjectURL(event.target.files[0]);\n\n\n      if (url !== \"\") {\n        setImageState(true);\n        setMeme(_objectSpread({}, meme, {\n          randomImage: url\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"middleText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        className: \"meme-form\",\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }, \"Input text here\"), /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, \"Top Text: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        placeholder: \"Write top text here\",\n        value: this.state.topText,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, \"Bottom Text: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        placeholder: \"Write bottom text here\",\n        value: this.state.bottomText,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, \"Pick Random Meme\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"upload-meme\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, \"Upload your own meme\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        name: \"uploadedImage\",\n        className: \"file\",\n        onChange: imghandle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"colorPicker\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, \"Top Text Color: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"color\",\n        name: \"topTextColor\",\n        value: this.state.topTextColor,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }\n      }, \"Bottom Text Color: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"color\",\n        name: \"bottomTextColor\",\n        value: this.state.bottomTextColor,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"meme\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: this.state.randomImg,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"top\",\n        style: {\n          color: this.state.topTextColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, this.state.topText), /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"bottom\",\n        style: {\n          color: this.state.bottomTextColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }, this.state.bottomText)));\n    }\n  }]);\n\n  return MemeGenerator;\n}(Component);\n\nexport default MemeGenerator;","map":{"version":3,"names":["React","Component","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","topTextColor","bottomTextColor","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","preventDefault","randNum","Math","floor","random","length","randMemImge","url","files","URL","createObjectURL","setImageState","setMeme","meme","randomImage","imghandle","color"],"sources":["/home/sylvia/Development/code/Phase2/meme-generator/src/components/MemeGenerator.js"],"sourcesContent":["import React, {Component} from \"react\";\n\nclass MemeGenerator extends Component{\n\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs: [],\n            topTextColor: 'white',\n            bottomTextColor: 'white'\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount(){\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const{memes} = response.data\n                this.setState({allMemeImgs: memes})\n            })\n        }\n\n    handleChange(event){\n        const {name, value} = event.target;\n        this.setState({[name]: value})\n    }\n\n    handleSubmit(event){\n        event.preventDefault()\n        \n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        \n        const randMemImge = this.state.allMemeImgs[randNum].url\n        \n        this.setState({randomImg: randMemImge})\n    }\n    imghandle(event) {\n        let url = \"\";\n        if (event.target.files.length !== 0) {\n          url = URL.createObjectURL(event.target.files[0]);\n        }\n        // url = URL.createObjectURL(event.target.files[0]);\n    \n        if (url !== \"\") {\n          setImageState(true);\n          setMeme({\n            ...meme,\n            randomImage: url\n          });\n        }\n      }\n\n    render(){\n        return (\n            <div className=\"middleText\">\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}> \n                    <h1>Input text here</h1>\n                    <label>Top Text: </label>\n                    <input \n                        type=\"text\"\n                        name=\"topText\" \n                        placeholder=\"Write top text here\"\n                        value={this.state.topText} \n                        onChange={this.handleChange}\n                    />\n                    <br></br>\n                    <label>Bottom Text: </label>\n                    <input \n                        type=\"text\"\n                        name=\"bottomText\" \n                        placeholder=\"Write bottom text here\"\n                        value={this.state.bottomText} \n                        onChange={this.handleChange}\n                    />\n                    <br></br>\n                    <button>Pick Random Meme</button>\n                    <p className=\"upload-meme\">Upload your own meme</p>\n                    <input\n                    type=\"file\"\n                    name=\"uploadedImage\"\n                    className=\"file\"\n                    onChange={imghandle}\n                        \n                    />\n                    <div className=\"colorPicker\">\n                        <label>Top Text Color: </label>\n                        <input \n                            type=\"color\" \n                            name=\"topTextColor\" \n                            value={this.state.topTextColor}\n                            onChange={this.handleChange}\n                        />\n                        <label>Bottom Text Color: </label>\n                        <input \n                            type=\"color\" \n                            name=\"bottomTextColor\" \n                            value={this.state.bottomTextColor}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                </form> \n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\" style={{color: this.state.topTextColor}}>{this.state.topText}</h2>\n                    <h2 className=\"bottom\"style={{color: this.state.bottomTextColor}}>{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default MemeGenerator"],"mappings":"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"},"metadata":{},"sourceType":"module"}