{"ast":null,"code":"var _jsxFileName = \"/home/sylvia/Development/code/Phase2/meme-generator/src/components/MemeGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n\n  const [allMemeData, setMemeAllImages] = React.useState({});\n  const [imgState, setImageState] = React.useState(false);\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"\"\n  });\n  React.useEffect(() => {\n    async function getMemesApi() {\n      const response = await fetch(\"https://api.imgflip.com/get_memes\");\n      const data = await response.json();\n      setMemeAllImages(data);\n    }\n\n    getMemesApi();\n  }, []);\n\n  function imghandle(event) {\n    let url = \"\";\n\n    if (event.target.files.length !== 0) {\n      url = URL.createObjectURL(event.target.files[0]);\n    }\n\n    if (url !== \"\") {\n      setImageState(true);\n      setMeme({ ...meme,\n        randomImage: url\n      });\n    }\n  }\n\n  function handleClick() {\n    const memesArray = allMemeData.data.memes;\n    const randomIndex = Math.floor(Math.random() * memesArray.length);\n    const imgUrl = memesArray[randomIndex].url;\n    setImageState(true);\n    setMeme({ ...meme,\n      randomImage: imgUrl\n    });\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme({ ...meme,\n      [name]: value\n    });\n  }\n\n  getStateObj = (e, type) => {\n    let rect = this.imageRef.getBoundingClientRect(); // This getBoundingClientRect() returns height, width and positions of the element\n    // In our case, we get the image's positions in the DOM since we position the text on the image.\n\n    const xOffset = e.clientX - rect.left;\n    const yOffset = e.clientY - rect.top; // This calculation yields us the current x and y positions of the element/cursor.\n\n    let stateObj = {}; // This is common function for top and bottom captions.\n\n    if (type === \"bottom\") {\n      stateObj = {\n        isBottomDragging: true,\n        isTopDragging: false,\n        bottomX: `${xOffset}px`,\n        bottomY: `${yOffset}px`\n      };\n    } else if (type === \"top\") {\n      stateObj = {\n        isTopDragging: true,\n        isBottomDragging: false,\n        topX: `${xOffset}px`,\n        topY: `${yOffset}px`\n      };\n    }\n\n    return stateObj;\n  };\n\n  handleMouseDown = (e, type) => {\n    const stateObj = this.getStateObj(e, type); // Finding current co-ordinates of the dragged <text />\n\n    document.addEventListener('mousemove', event => this.handleMouseMove(event, type)); // Start tracking the mouse movement.\n\n    this.setState({ ...stateObj\n    });\n  };\n\n  handleMouseMove = (e, type) => {\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\n      // Only if dragging is active in the state, track mouse movements.\n      let stateObj = {};\n\n      if (type === \"bottom\" && this.state.isBottomDragging) {\n        stateObj = this.getStateObj(e, type); // Getting the co-ordinates for bottom caption\n      } else if (type === \"top\" && this.state.isTopDragging) {\n        stateObj = this.getStateObj(e, type); // Getting the co-ordinates for top caption\n      }\n\n      this.setState({ ...stateObj\n      });\n    }\n  };\n\n  handleMouseUp = event => {\n    // If mouse is released, remove the event listener and terminate drag actions.\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    this.setState({\n      isTopDragging: false,\n      isBottomDragging: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-class\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-text\",\n            onChange: handleChange,\n            name: \"topText\",\n            value: meme.topText,\n            placeholder: \"Enter top text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-text\",\n            onChange: handleChange,\n            name: \"bottomText\",\n            value: meme.bottomText,\n            placeholder: \"Enter bottom text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: handleClick,\n          children: \"Generate a new meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"upload-meme\",\n          children: \"Upload meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"uploadedImage\",\n          className: \"file\",\n          onChange: imghandle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      style: {\n        display: imgState ? \"block\" : \"none\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--img\",\n        alt: \"meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"Tzy3ftD/PMfxx+HSwN2v6M+eFzI=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","Form","allMemeData","setMemeAllImages","useState","imgState","setImageState","meme","setMeme","topText","bottomText","randomImage","useEffect","getMemesApi","response","fetch","data","json","imghandle","event","url","target","files","length","URL","createObjectURL","handleClick","memesArray","memes","randomIndex","Math","floor","random","imgUrl","handleChange","name","value","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","isBottomDragging","isTopDragging","bottomX","bottomY","topX","topY","handleMouseDown","document","addEventListener","handleMouseMove","setState","state","handleMouseUp","removeEventListener","display"],"sources":["/home/sylvia/Development/code/Phase2/meme-generator/src/components/MemeGenerator.js"],"sourcesContent":["import React from \"react\";\n\n\nexport default function Form() {\n  const [allMemeData, setMemeAllImages] = React.useState({});\n  const [imgState, setImageState] = React.useState(false);\n   const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"\"\n  });\n\n  React.useEffect(() => {\n    async function getMemesApi() {\n      const response = await fetch(\"https://api.imgflip.com/get_memes\");\n      const data = await response.json();\n      setMemeAllImages(data);\n    }\n    getMemesApi();\n  }, []);\n\n  function imghandle(event) {\n    let url = \"\";\n    if (event.target.files.length !== 0) {\n      url = URL.createObjectURL(event.target.files[0]);\n    }\n    \n\n    if (url !== \"\") {\n      setImageState(true);\n      setMeme({\n        ...meme,\n        randomImage: url\n      });\n    }\n  }\n  function handleClick() {\n    const memesArray = allMemeData.data.memes;\n    const randomIndex = Math.floor(Math.random() * memesArray.length);\n    const imgUrl = memesArray[randomIndex].url;\n    setImageState(true);\n    setMeme({\n      ...meme,\n      randomImage: imgUrl\n    });\n  }\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    setMeme({\n      ...meme,\n      [name]: value\n    });\n  }\n\n  getStateObj = (e, type) => {\n    let rect = this.imageRef.getBoundingClientRect();\n    // This getBoundingClientRect() returns height, width and positions of the element\n    // In our case, we get the image's positions in the DOM since we position the text on the image.\n    const xOffset = e.clientX - rect.left;\n    const yOffset = e.clientY - rect.top;\n    // This calculation yields us the current x and y positions of the element/cursor.\n    let stateObj = {};\n    // This is common function for top and bottom captions.\n    if (type === \"bottom\") {\n      stateObj = {\n        isBottomDragging: true,\n        isTopDragging: false,\n        bottomX: `${xOffset}px`,\n        bottomY: `${yOffset}px`\n      }\n    } else if (type === \"top\") {\n      stateObj = {\n        isTopDragging: true,\n        isBottomDragging: false,\n        topX: `${xOffset}px`,\n        topY: `${yOffset}px`\n      }\n    }\n    return stateObj;\n  }\n  \n  handleMouseDown = (e, type) => {\n    const stateObj = this.getStateObj(e, type);\n    // Finding current co-ordinates of the dragged <text />\n    document.addEventListener('mousemove', (event) => this.handleMouseMove(event, type));\n    // Start tracking the mouse movement.\n    this.setState({\n      ...stateObj\n    })\n  }\n  \n  handleMouseMove = (e, type) => {\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\n      // Only if dragging is active in the state, track mouse movements.\n      let stateObj = {};\n      if (type === \"bottom\" && this.state.isBottomDragging) {\n        stateObj = this.getStateObj(e, type); // Getting the co-ordinates for bottom caption\n      } else if (type === \"top\" && this.state.isTopDragging){\n        stateObj = this.getStateObj(e, type); // Getting the co-ordinates for top caption\n      }\n      this.setState({\n        ...stateObj\n      });\n    }\n  };\n  \n  handleMouseUp = (event) => {\n    // If mouse is released, remove the event listener and terminate drag actions.\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    this.setState({\n      isTopDragging: false,\n      isBottomDragging: false\n    });\n  }\n\n  return (\n    <div>\n      <div className=\"form-class\">\n        <div className=\"form\">\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              className=\"input-text\"\n              onChange={handleChange}\n              name=\"topText\"\n              value={meme.topText}\n              placeholder=\"Enter top text\"\n            />\n            <input\n              type=\"text\"\n              className=\"input-text\"\n              onChange={handleChange}\n              name=\"bottomText\"\n              value={meme.bottomText}\n              placeholder=\"Enter bottom text\"\n            />\n          </div>\n          <button className=\"btn\" onClick={handleClick}>\n            Generate a new meme\n          </button>\n          <p className=\"upload-meme\">Upload meme</p>\n          <input\n            type=\"file\"\n            name=\"uploadedImage\"\n            className=\"file\"\n            onChange={imghandle}\n          />\n        </div>\n      </div>\n      <div className=\"meme\" style={{ display: imgState ? \"block\" : \"none\" }}>\n        <img src={meme.randomImage} className=\"meme--img\" alt=\"meme\" />\n        <h2 className=\"meme--text top\">{meme.topText}</h2>\n        <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n      </div>\n    </div>\n  );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}